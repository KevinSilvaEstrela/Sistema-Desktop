
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, filedialog
import tkinter as tk
from config import SUPABASE
import mplcursors
import pandas as pd
from collections import Counter
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.pyplot as plt
from reportlab.lib.pagesizes import letter, A4
from reportlab.pdfgen import canvas as pdf_canvas
import os



OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\kevin\OneDrive\Documentos\TKINTER\Sistema-Desktop\assets_dashboard\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def fetch_data():
    response = SUPABASE.table('core_pedido').select('*').execute()
    return response.data





class Dashboard(tk.Frame):
    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent
        self.figures = []  # Lista para armazenar as figuras dos gráficos
        self.mais_vendidas = [] # Lista para armazenar as bebidas mais vendidas
        self.setup_ui()
        self.obter_bebidas_mais_frequentes()
        self.obter_acompanhamentos_mais_frequentes()
        self.gerar_graficos()
        
    
    def setup_ui(self):
        self.parent.title("Dashboard")
        largura_tela = self.parent.winfo_screenwidth()
        altura_tela = self.parent.winfo_screenheight()
        self.parent.geometry(f"{largura_tela}x{altura_tela}")
        #self.parent.geometry("1007x660")
        self.parent.configure(bg="#0B0B0B")
    
        self.imagem_atualizar = PhotoImage(file=relative_to_assets("refresh.png"))
        self.imagem_compartilhar = PhotoImage(file=relative_to_assets("compartilhar.png"))
        self.imagem_tela_inicial = PhotoImage(file=relative_to_assets("tela_inicial.png"))
    
        self.canvas = tk.Canvas(
            self.parent,
            bg = "#0B0B0B",
            height = 660,
            width = 1007,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        self.canvas.pack(fill=tk.BOTH, expand=True)
        
        self.elements = {}
        
        self.elements['dashboard_text'] = self.canvas.create_text(
            135.0,
            18.0,
            anchor="nw",
            text="Dashboard",
            fill="#FFFFFF",
            font=("RobotoSlab Medium", 28 * -1)
        )

        
        self.elements['rect1'] = self.canvas.create_rectangle(
            130.0,
            482.0,
            411.0,
            606.0,
            fill="#181818",
            outline="")

        self.elements['rect2'] = self.canvas.create_rectangle(
            443.0,
            122.0,
            707.0,
            246.0,
            fill="#181818",
            outline="")

        self.elements['rect3'] = self.canvas.create_rectangle(
            135.0,
            122.0,
            397.0,
            246.0,
            fill="#181818",
            outline="")

        self.elements['rect4'] = self.canvas.create_rectangle(
            426.0,
            482.0,
            707.0,
            606.0,
            fill="#181818",
            outline="")

        self.elements['rect5'] = self.canvas.create_rectangle(
            131.0,
            264.0,
            706.0,
            462.0,
            fill="#181818",
            outline="")

        
        self.elements['rect6'] = self.canvas.create_rectangle(
            1100.0,
            122.0,
            1330.0,
            606.0,
            fill="#181818",
            outline="")
        '''
        self.elements['dados_text1'] = self.canvas.create_text(
            147.0,
            274.0,
            anchor="nw",
            text="Dados",
            fill="#FFFFFF",
            font=("RobotoSlab Medium", 20 * -1)
        )

        self.elements['dados_text2'] = self.canvas.create_text(
            144.0,
            486.0,
            anchor="nw",
            text="Dados",
            fill="#FFFFFF",
            font=("RobotoSlab Regular", 20 * -1)
        )

        self.elements['dados_text3'] = self.canvas.create_text(
            151.0,
            128.0,
            anchor="nw",
            text="Dados",
            fill="#FFFFFF",
            font=("RobotoSlab Regular", 20 * -1)
        )

        self.elements['dados_text4'] = self.canvas.create_text(
            460.0,
            128.0,
            anchor="nw",
            text="Dados",
            fill="#FFFFFF",
            font=("RobotoSlab Regular", 20 * -1)
        )

        self.elements['dados_text5'] = self.canvas.create_text(
            443.0,
            486.0,
            anchor="nw",
            text="Dados",
            fill="#FFFFFF",
            font=("RobotoSlab Regular", 20 * -1)
        )
        '''
        self.elements['melhores_vendas_bebidas_text'] = self.canvas.create_text(
            1115.0,
            140.0,
            anchor="nw",
            text="Melhores vendas - Bebidas",
            fill="#FFFFFF",
            font=("RobotoSlab Regular", 16 * -1)
        )
        
        self.elements['melhores_vendas_acompanhamento_text'] = self.canvas.create_text(
            1135.0,
            380.0,
            anchor="nw",
            text=f"""Melhores vendas \nAcompanhamento""",
            fill="#FFFFFF",
            font=("RobotoSlab Regular", 16 * -1)
        )
        # Implementar função de 'Estoque' e 'Ver Mais' posteriormente
        '''
        self.elements['faltas_text'] = self.canvas.create_text(
            1115.0,
            399.0,
            anchor="nw",
            text="Faltas no estoque desse mês",
            fill="#FFFFFF",
            font=("RobotoSlab Regular", 16 * -1)
        )
        
        self.elements['ver_mais_text'] = self.canvas.create_text(
            1185.0,
            330.0,
            anchor="nw",
            text="Ver mais",
            fill="#5F5F5F",
            font=("RobotoSlab Regular", 16 * -1)
        )
        

        self.elements['nome_text'] = self.canvas.create_text(
            1185.0,
            570.0,
            anchor="nw",
            text="Ver mais",
            fill="#5F5F5F",
            font=("RobotoSlab Regular", 16 * -1)
        )
        '''
        
        
        self.elements['line1'] = self.canvas.create_rectangle(
            1115.0,
            207.0,
            1320.0,
            208.0,
            fill="#212121",
            outline="")

        self.elements['line2'] = self.canvas.create_rectangle(
            1115.0,
            263.0,
            1320.0,
            264.0,
            fill="#212121",
            outline="")

        self.elements['line3'] = self.canvas.create_rectangle(
            1115.0,
            314.0,
            1320.0,
            315.0,
            fill="#212121",
            outline="")

        self.elements['line4'] = self.canvas.create_rectangle(
            1115.0,
            459.0,
            1320.0,
            460.0,
            fill="#212121",
            outline="")

        self.elements['line5'] = self.canvas.create_rectangle(
            1115.0,
            510.0,
            1320.0,
            511.0,
            fill="#212121",
            outline="")

        self.elements['line6'] = self.canvas.create_rectangle(
            1115.0,
            564.0,
            1320.0,
            565.0,
            fill="#212121",
            outline="")

        self.elements['left_bar'] = self.canvas.create_rectangle(
            0.0,
            0.0,
            88.0,
            660.0,
            fill="#181818",
            outline="")

        self.image_image_1 = PhotoImage(
            file=relative_to_assets("logo.png"))
        self.elements['logo_image'] = self.image_1 = self.canvas.create_image(
            46.0,
            41.0,
            image=self.image_image_1
        )
        
        
        # Botão para atualizar a tela
        self.btn_atualizar = tk.Button(self.parent, image=self.imagem_atualizar, command=self.refresh_screen)
        self.btn_atualizar.place(x=11.0, y=115.0, width=66.0, height=60.0)
        
        # Botão para exportar para pdf
        self.btn_compartilhar = tk.Button(self.parent, image=self.imagem_compartilhar, command=self.save_pdf)
        self.btn_compartilhar.place(x=11.0, y=205.0, width=66.0, height=60.0)
        
        # Botão para voltar para a tela de Login
        self.btn_tela_inicial = tk.Button(self.parent, image=self.imagem_tela_inicial, command=self.abrir_login)
        self.btn_tela_inicial.place(x=11.0, y=570.0, width=66.0, height=60.0)
    
    def obter_bebidas_mais_frequentes(self):
        data = fetch_data()
        data = pd.DataFrame(data)
        bebidas = data['Bebida']

        contagem_bebidas = Counter(bebidas)
        bebidas_mais_frequentes = contagem_bebidas.most_common(3)

        primeira_bebida_mais_frequente = bebidas_mais_frequentes[0][0]
        segunda_bebida_mais_frequente = bebidas_mais_frequentes[1][0]
        terceira_bebida_mais_frequente = bebidas_mais_frequentes[2][0]
        
        self.elements['bebida_mais_vendida1'] = self.canvas.create_text(
            1130.0,
            180.0,
            anchor="nw",
            text=f"1º {primeira_bebida_mais_frequente}",
            fill="#FFFFFF",
            font=("RobotoSlab Regular", 16 * -1)
        )
        
        self.elements['bebida_mais_vendida2'] = self.canvas.create_text(
            1130.0,
            238.0,
            anchor="nw",
            text=f"2º {segunda_bebida_mais_frequente}",
            fill="#FFFFFF",
            font=("RobotoSlab Regular", 16 * -1)
        )
        
        self.elements['bebida_mais_vendida3'] = self.canvas.create_text(
            1130.0,
            290.0,
            anchor="nw",
            text=f"3º {terceira_bebida_mais_frequente}",
            fill="#FFFFFF",
            font=("RobotoSlab Regular", 16 * -1)
        )
    
    def obter_acompanhamentos_mais_frequentes(self):
        data = fetch_data()
        data = pd.DataFrame(data)
        acompanhamentos = data['Acompanhamento']

        contagem_acompanhamentos = Counter(acompanhamentos)
        acompanhamentos_mais_frequentes = contagem_acompanhamentos.most_common(3)

        primeiro_acompanhamento_mais_frequente = acompanhamentos_mais_frequentes[0][0]
        segundo_acompanhamento_mais_frequente = acompanhamentos_mais_frequentes[1][0]
        terceiro_acompanhamento_mais_frequente = acompanhamentos_mais_frequentes[2][0]
        
        self.elements['acompanhamento_mais_vendido1'] = self.canvas.create_text(
            1130.0,
            430.0,
            anchor="nw",
            text=f"1º {primeiro_acompanhamento_mais_frequente}",
            fill="#FFFFFF",
            font=("RobotoSlab Regular", 16 * -1)
        )
        
        self.elements['acompanhamento_mais_vendid02'] = self.canvas.create_text(
            1130.0,
            480.0,
            anchor="nw",
            text=f"2º {segundo_acompanhamento_mais_frequente}",
            fill="#FFFFFF",
            font=("RobotoSlab Regular", 16 * -1)
        )
        
        self.elements['acompanhamento_mais_vendid03'] = self.canvas.create_text(
            1130.0,
            530.0,
            anchor="nw",
            text=f"3º {terceiro_acompanhamento_mais_frequente}",
            fill="#FFFFFF",
            font=("RobotoSlab Regular", 16 * -1)
        )
        
    def abrir_login(self):
        from login import Login
        self.parent.destroy()
        new_root = tk.Tk()
        login = Login(new_root)
        login.pack(fill="both", expand=True)
        new_root.mainloop()
    
    def save_pdf(self):
        import datetime
        # Adiciona as figuras ao relatório
        self.figures.append(self.grafico_bebida())
        self.figures.append(self.grafico_acompanhamento())
        # self.figures.append(self.grafico_valor())
        self.figures.append(self.grafico_status())

        data_atual = datetime.datetime.now().strftime("%d/%m/%Y %H:%M")

        # Função para salvar o PDF
        file_path = filedialog.asksaveasfilename(defaultextension='.pdf', initialfile='Relatório de vendas - Circuit Coffee', filetypes=[('PDF files', '*.pdf')])
        if file_path:
            pdf = pdf_canvas.Canvas(file_path, pagesize=A4)
            pdf.setFont("Helvetica", 12)

            x_offset = 50
            y_offset_top = 750
            y_offset_bottom = 380  # Reduzido para diminuir o espaçamento
            current_y_offset = y_offset_top

            pdf.drawString(170, y_offset_top + 30, f"Dashboard - Relatório de Gráficos - {data_atual}")

            figure_count = 0

            for figure in self.figures:
                image_path = f"temp_figure_{self.figures.index(figure)}.png"
                figure.savefig(image_path)

                # Ajusta o tamanho da figura para caber na página
                fig_width = 300
                fig_height = 200
                if current_y_offset == y_offset_top:
                    pdf.drawImage(image_path, x_offset, y_offset_top - fig_height, width=fig_width, height=fig_height)
                    current_y_offset = y_offset_bottom
                else:
                    pdf.drawImage(image_path, x_offset, y_offset_bottom - fig_height, width=fig_width, height=fig_height)
                    current_y_offset = y_offset_top
                    pdf.showPage()

                os.remove(image_path)  # Remove o arquivo temporário
                figure_count += 1

                # Verifica se é necessário adicionar uma nova página
                if figure_count % 2 == 0:
                    current_y_offset = y_offset_top

            # Se a última figura foi adicionada na parte inferior da página, adiciona uma nova página
            if figure_count % 2 != 0:
                pdf.showPage()

            pdf.save()
    
    def clear_graphs(self):
        # Limpa os gráficos existentes
        for widget in self.parent.winfo_children():
            if isinstance(widget, tk.Canvas):
                widget.destroy()
        # Limpa também os widgets matplotlib
        for widget in self.parent.winfo_children():
            if isinstance(widget, FigureCanvasTkAgg):
                widget.get_tk_widget().destroy()

    #Gera todos os gráficos de uma vez
    def gerar_graficos(self):
        self.grafico_bebida()
        self.grafico_acompanhamento()
       # self.grafico_valor()
        self.grafico_status()
    
    # Atualiza a tela
    def refresh_screen(self):
        
        self.clear_graphs()
        self.setup_ui()
        self.figures.clear()
        self.mais_vendidas.clear()
        self.gerar_graficos()
        self.obter_bebidas_mais_frequentes()
        self.obter_acompanhamentos_mais_frequentes()

    def grafico_bebida(self):
        data = fetch_data()
        bebidas = [item['Bebida'] for item in data]
        contador = Counter(bebidas)

        total = sum(contador.values())
        percentuais = {chave: (valor / total) * 100 for chave, valor in contador.items()}

        labels = percentuais.keys()
        sizes = percentuais.values()

        figure = plt.Figure(figsize=(3, 2), dpi=100)
        ax = figure.add_subplot(111)
        ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
        ax.axis('equal')
        ax.set_title("Pedidos - Bebidas")

        canvas = FigureCanvasTkAgg(figure, master=self.parent)
        canvas.get_tk_widget().place(x=285, y=70)
        canvas.draw()
        
        return figure
            
    def grafico_acompanhamento(self):
        data = fetch_data()
        acompanhamentos = [item['Acompanhamento'] for item in data]
        contador = Counter(acompanhamentos)

        total = sum(contador.values())
        percentuais = {chave: (valor / total) * 100 for chave, valor in contador.items()}

        labels = percentuais.keys()
        sizes = percentuais.values()

        figure = plt.Figure(figsize=(3, 2), dpi=100)
        ax = figure.add_subplot(111)
        ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90, textprops={'color': "black"})
        ax.axis('equal')
        ax.set_title("Pedidos - Acompanhamento", color='black')

        ax.set_facecolor((1, 1, 1, 0))   # Fundo da figura

        canvas = FigureCanvasTkAgg(figure, master=self.parent)
        canvas.get_tk_widget().place(x=580, y=70)
        canvas.draw()
        
        return figure
    
    def grafico_status(self):
        # Fetch and process data
        data = fetch_data()
        status = [item['StatusPedido'] for item in data]
        contador = Counter(status)
        total = sum(contador.values())

        # Define colors based on status
        colors = {'Aguardando': 'blue', 'Aprovado': 'green', 'Cancelado': 'red'}

        # Create the bar chart
        figure, ax = plt.subplots(figsize=(6, 3), dpi=100, facecolor='none')

        # Extract status labels and corresponding counts
        status_labels = list(contador.keys())
        status_counts = list(contador.values())

        # Create individual bars for each status
        bars = ax.bar(range(len(status_labels)), status_counts, tick_label=status_labels, color=[colors[label] for label in status_labels])

        # Set chart labels and title
        ax.set_xticks(range(len(status_labels)))
        ax.set_xticklabels(status_labels, rotation=0, ha='center')
        ax.set_ylabel('Quantidade')
        ax.set_title('Quantidade de Pedidos por Status')

        # Hide the x-axis
        #ax.get_xaxis().set_visible(False)
        

        # Add interactivity
        cursor = mplcursors.cursor(bars, hover=True)
        
        @cursor.connect("add")
        def on_add(sel):
            sel.annotation.set_text(f'{status_labels[sel.index]}: {sel.target[1]}')

        # Create canvas and display the chart
        canvas = FigureCanvasTkAgg(figure, master=self.parent)
        canvas.get_tk_widget().place(x=283, y=280)
        canvas.draw()

        return figure

    
if __name__ == "__main__":        
    root = tk.Tk()
    app = Dashboard(root)
    app.pack(fill="both", expand=True)
    root.mainloop()